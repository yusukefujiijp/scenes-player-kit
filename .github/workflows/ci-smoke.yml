name: CI (smoke)

on:
  push:
    branches: [ "main" ]
    paths:
      - "index.html"
      - "scenes.json"
      - "js/**"
      - "assets/**"
      - ".github/workflows/ci-smoke.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "index.html"
      - "scenes.json"
      - "js/**"
      - "assets/**"
      - ".github/workflows/ci-smoke.yml"
  workflow_dispatch:

# 最小権限（読み取りのみ）
permissions:
  contents: read

# 同じ PR/ブランチの古いジョブを自動キャンセル
concurrency:
  group: smoke-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm' # 将来 npm ci を入れる時に効きます

      - name: Print Node/NPM versions
        run: |
          node -v
          npm -v

      # --- レガシー名の混入チェック（誤参照を即赤止め）---
      - name: Assert no legacy filename "player.core.js"
        run: |
          if git grep -n --cached -e 'player\.core\.js' || git grep -n -e 'player\.core\.js'; then
            echo 'ERROR: Found legacy reference "player.core.js". Use "player-core.js".'
            exit 1
          fi
          echo 'OK: no legacy name found.'

      # --- JS 構文チェック（ESM, acorn を 8系に固定）---
      - name: Syntax check: core
        run: npx --yes acorn@8 --ecma2022 --module js/player-core.js

      - name: Syntax check: tts-sanitize
        run: |
          if [ -f js/tts-sanitize.js ]; then
            npx --yes acorn@8 --ecma2022 --module js/tts-sanitize.js
          else
            echo "js/tts-sanitize.js not present (optional)."
          fi

      - name: Syntax check: tts-kv-simple (optional)
        run: |
          if [ -f js/tts-kv-simple.js ]; then
            npx --yes acorn@8 --ecma2022 --module js/tts-kv-simple.js
          else
            echo "js/tts-kv-simple.js not present (optional)."
          fi

      # --- 任意の辞書 JSON があれば parse 検査 ---
      - name: Validate assets/tts-rules.json (optional)
        run: |
          if [ -f assets/tts-rules.json ]; then
            node -e "const fs=require('fs'); JSON.parse(fs.readFileSync('assets/tts-rules.json','utf8')); console.log('assets/tts-rules.json OK');"
          else
            echo "assets/tts-rules.json not present (optional)."
          fi

      # --- scenes.json の最低限スキーマ検査（超軽量）---
      - name: Validate scenes.json schema (light)
        run: |
          node -e "const fs=require('fs');
          const j=JSON.parse(fs.readFileSync('scenes.json','utf8'));
          if(!j||!j.videoMeta||!Array.isArray(j.scenes)||!j.scenes.length){
            throw new Error('scenes.json must have {videoMeta, scenes[]} and at least 1 scene');
          }
          // page1 placeholder 原則（音声なし・録画時カット想定）
          const s0=j.scenes[0]||{};
          if(String(s0.type)!=='placeholder'){
            throw new Error('page1 must be a placeholder scene');
          }
          console.log('scenes.json minimal schema OK');
          "

      # --- 必須ファイルの存在チェック ---
      - name: Static assets presence
        run: |
          test -f index.html
          test -f scenes.json
          test -f js/player-core.js
          echo "required files present"